import { Injectable } from '@angular/core';
import * as signalR from '@microsoft/signalr';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class SignalService {
  private hubConnection!: signalR.HubConnection;
  private cartUpdates = new BehaviorSubject<any>(null);
  cartUpdates$ = this.cartUpdates.asObservable();

  constructor() {}

  // üîπ Iniciar conexi√≥n con el backend
  startConnection() {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl('http://localhost:5169/cartHub', {
        skipNegotiation: true,
        transport: signalR.HttpTransportType.WebSockets
      })
      .withAutomaticReconnect()
      .build();

    this.hubConnection
      .start()
      .then(() => console.log('‚úÖ Conectado a SignalR'))
      .catch(err => console.error('‚ùå Error al conectar SignalR:', err));

    // üìå Escuchar eventos del backend
    this.hubConnection.on('CartUpdated', (cartData) => {
      console.log('üì¶ Carrito actualizado:', cartData);
      this.cartUpdates.next(cartData);
    });

    this.hubConnection.on('CartCleared', () => {
      console.log('üóëÔ∏è Carrito vaciado');
      this.cartUpdates.next({ items: [] }); // Emitir carrito vac√≠o
    });
  }

  // üîπ Enviar actualizaci√≥n del carrito al backend
  sendUpdate(userId: number, cartData: any) {
    if (!this.hubConnection || this.hubConnection.state !== signalR.HubConnectionState.Connected) {
      console.warn('‚ö†Ô∏è No hay conexi√≥n activa con SignalR');
      return;
    }

    this.hubConnection.invoke('NotifyCartUpdated', userId.toString(), cartData)
      .catch(err => console.error('‚ùå Error enviando datos:', err));
  }

  // üîπ Notificar que el carrito ha sido vaciado
  sendClearNotification(userId: number) {
    if (!this.hubConnection || this.hubConnection.state !== signalR.HubConnectionState.Connected) {
      console.warn('‚ö†Ô∏è No hay conexi√≥n activa con SignalR');
      return;
    }

    this.hubConnection.invoke('NotifyCartCleared', userId.toString())
      .catch(err => console.error('‚ùå Error notificando carrito vaciado:', err));
  }

  // üîπ Detener conexi√≥n cuando el usuario se desconecta
  stopConnection() {
    if (this.hubConnection) {
      this.hubConnection.stop()
        .then(() => console.log('‚èπÔ∏è Conexi√≥n con SignalR cerrada'))
        .catch(err => console.error('‚ùå Error al cerrar conexi√≥n:', err));
    }
  }
}
